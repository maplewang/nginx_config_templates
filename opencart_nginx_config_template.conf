#========================================
# Optimized OpenCart NGINX server config
#========================================
#
# NGINX server(vhost) config for OpenCart e-commerce system.
# NGINX serves static files and proxies connection to FastCGI application server (PHP-FPM), that executes OpenCart PHP scripts.
#
#Copyright (c) 2013 Nikita Solovyev
#All rights reserved.
#
#Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
#2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
#in the documentation and/or other materials provided with the distribution.
#
#3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived 
#from this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
#BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
#THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
#ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

server {
	#Permanent redirect 301 (SEO recommended) from different names
	
	#A special wildcard name in the form “.example.org” can be used 
	#to match both the exact name “example.org” and the wildcard name “*.example.org”.
	
	#This block applies to connections on port 80 common HTTP
	listen 80;
	
	#with Host request header matching the following patterns
	server_name *.example.com .example.org .example.net;

	#Where to write request log and error log
    access_log  /var/log/nginx/example.com.typos.access.log;
    error_log  /var/log/nginx/example.com.typos.error.log notice;
	
	#Rertun 301 redirect to example.com with the same http/https scheme and request URI
	return 301 $scheme://example.com$request_uri;
}

server {
	#Main server(vhost) block
	
	#This block applies to connections on port 80 common HTTP
	listen 80;

	#with Host request header matching the following pattern
	server_name example.com;

	#Files to search in each location and serve by defautl the first matched with prior matching to other location blocks with new pattern including this file
	index index.php index.html index.htm;
	
	#Base root folder to search for files matching URI
	root /var/www/example.com/public;
	
	#Where to write request log and error log
	access_log  /var/log/nginx/example.com.access.log;
	error_log  /var/log/nginx/example.com.error.log notice;
	
	#Add specified charset to Content-Type response header
    #charset utf8;
	
	#Apply connection limiting zone defined in http block of nginx.conf, here: limit 20 active requests per single IP address
	limit_conn limitzone 20;
	
	#Specify adresses that are not allowed to access your server in deny directives (i.e. prevent competitors from parsing your site)
	#deny 192.168.1.1/24;
	#deny 192.168.2.1/24;
	#'allow all' is required to allow connections to IPs not matching 'deny' directive
	#allow all;
	
	#General security enhancements
	
	#Allow only safe HTTP methods, for others return 403 "Forbidden" error
	if ($request_method !~ ^(GET|HEAD|POST)$ ) {
		return 403;
	}
	
	#Directory with user uploads should not allow .php files, therefore on access attempt return 403 "Forbidden" error
    location /uploads {
    	location ~ \.php$ {return 403;}
    }
	
	#More security enhancements (Remember to rename admin folder in your OpenCart installation, here admin renamed to "testing_test")
	
	#Prevent access to certain directories if OpenCart is put directly to /public folder on the server
	location ~* ^/(admin?|testing_test/controller?|testing_test/language?|testing_test/model?|catalog/controller?|catalog/language?|catalog/model?|system?) {
	    #On attempt to access the above directories return 404 "Not found" error
		return 404;
		
		#Disable request logging
		access_log off;
		
		#Disable loggin of not found URIs
		log_not_found off;
	}
	
	#Prevent access to any config files
	location ~* config\.php {
		return 404;
		access_log off;
		log_not_found off;
	}
	
	#IMPORTANT!!!  vQmod specific. This prevents access to vQmod files. 
	#Comment during vQmod installation and then uncomment back for production environment
	location ~* ^/vqmod? {
		return 404;
		log_not_found off;
	}
	#END_IMPORTANT!!!
	
	#Deny access to all files starting with dot(Apache files, i.e. .htaccess)
	location ~ /\. {
		#Deny access to everyone for files matching the above pattern
        deny all;
		access_log off;
        log_not_found off;
    }	
	
	#More possible security exclusions
	#location ~* \.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$|\.php_ {
	#	return 404;
	#	access_log off;
	#	log_not_found off;
	#}
	
	location ~* \.(tpl|ini|log)$ {
		return 404;
		access_log off;
		log_not_found off;
	}
	
	#SEO URLs rewrite rules	
	
	#Depending on OpenCart modules used, next blocks might be needed
	#location ~* ^sitemap.xml${
	#	rewrite ^/sitemap.xml$ /index.php?route=feed/google_sitemap last;
	#}
	#	location ~* ^googlebase.xml${
	#	rewrite ^googlebase.xml$ /index.php?route=feed/google_base last;
	#}
	
	#Disable logging for the following static files to save log storage space and improve overal performance due to less disk access operations
	location = /favicon.ico {
        log_not_found off;
        access_log off;
    }
    location = /robots.txt {
        log_not_found off;
        access_log off;
    }
	
	#Static files
	location ~* ^.+\.(jpg|jpeg|gif|css|png|js|ico|txt|xml|swf|flv|pdf)$ {
		#Allow checking for existing pre-compressed static files before compression
		#Other gzip settings from http block in nginx.conf are taken in account
		gzip_static on;
		
		#Again, disable logging for performance
		access_log off;
		
		#Add "Expires" and "Cache-Control" headers for static files to lower the number of future clien requests, here static files cache on client side is set to be stored for 30 days
		expires 30d;
	}

	#Alternative redirect on errors, in general not required as OpenCart serves it's own error pages	
	#On NOT FOUND (404) return index.php page in case it's NGINX that can't found a match 
	error_page 404 /index.php;
	
	#Alternative redirect on errors, in general not required as OpenCart serves it's own error pages
	#Possible redirect on FORBIDDEN (403)
	#error_page  403  http://example.com/forbidden.html;
	#error_page 404 = /index.php;  Return specified page (index.php) with response code equal to received (404 here)
	#error_page  404 /404.html;
	#location = /404.html {
	#	root   /var/www/example.com/errorpages;
	#}
	#error_page   500 502 503 504  /50x.html;
	#location = /50x.html {
	#	root   /var/www/example.com/errorpages;
	#}

	#Main location block, in general should work in most cases
	location / {
	
		#Depending on SEO URL module used this might not work as is
		#if it doesn't work, try removing second argument "$uri/"
		#also changing "$uri&$args" to "$request_uri" might help
		#Try to find a file requested by URI, if it is not found rewrite the requested URI as the last argument and try to match through all location blocks again
		try_files $uri $uri/ /index.php?_route_=$uri&$args;
	}
	
	#Alternative main block, use this or "Main location block" depending on SEO URL module used
	#location / {
	#If it doesn't work try removing second argument "$uri/"
	#	try_files $uri $uri/ @opencart;
	#}
	#location @opencart {
	#	rewrite ^/(.+)$ /index.php?_route_=$1 last;
	#}
	
	#Admin specific, here "admin" renamed to "testing_test"
	location /testing_test/ {
		index index.php;
	}
	
	#Just in case, if phpMyAdmin is used
	#location /phpmyadmin/ {
	#	root /usr/share/phpmyadmin/;
	#	index index.php;
	#}

	#Serve PHP scripts via PHP-FPM FastCGI
	#Any files ending in .php will be served via FastCGI
	location ~ \.php$ {
		#Additional limitation to 10 simultanious active connections per IP
		#limit_conn limitzone 10;
		
		#Try to find requested *.php file and use it for FastCGI request or return 404 "Not Found" error if it doesn't exist
		#this prevents serious security flaw in some FastCGI servers
		try_files $uri =404;
		
		#Address of FastCGI server, use UNIX socket for better performance if both NGINX and FastCGI server run on same machine
		fastcgi_pass unix:/var/run/php-fpm/example.com.socket;
		
		#Default filename to append to SCRIPT_FILENAME if the request ends with a slash
		fastcgi_index index.php;
		
		#Defines format for SCRIPT_FILENAME to be passed to FastCGI server, here it will be the specified in the beginning 'root' folder + the *.php script name from request
		fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
		
		#Include other mapping of NGINX set environment variables to FastCGI variable
		include /etc/nginx/fastcgi_params;
		
		#Might be required if PHP was built with --enable-force-cgi-redirect
		#fastcgi_param REDIRECT_STATUS 200;
		
		#Time to wait between two successive reads from FastCGI server, default is 60s, uncomment this and modify the value if long running scripts are used
		#Note that long running scripts will keep connection open in this case and this decreases overal performance
		#fastcgi_read_timeout 360s;
	}
}